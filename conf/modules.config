process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "${params.publish_dir_mode}",
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

process {
    // withName: 'BWA_ALIGN_HOST' {

    // }

    withName: 'BAM_HOST_SORT_STATS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.host.sorted" }
        // publishDir = [
        //     path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
        //     mode: "${params.publish_dir_mode}",
        //     pattern: "*.bam",
        //     enabled: ( params.save_align_intermed || (!params.run_read_filter && !params.run_mark_dups && !params.run_remove_dups) )
        // ]
    }

    withName: 'BAM_HOST_SORT_STATS:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.host.sorted" }
        // publishDir = [
        //     path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
        //     mode: "${params.publish_dir_mode}",
        //     pattern: "*.bai",
        // ]
    }

     withName: 'BAM_HOST_SORT_STATS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.host" }
            // publishDir = [
            //     path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
            //     mode: "${params.publish_dir_mode}",
            //     pattern: "*.{stats,flagstat,idxstats}",
            //     enabled: ( params.save_align_intermed || (!params.run_read_filter && !params.run_mark_dups && !params.run_remove_dups) )
            // ]
    }

    withName: 'SAMTOOLS_VIEW_HOST' {
        ext.args = "-b -f 4"
        ext.prefix = { "${meta.id}.viral" }
    }

    withName: 'SAMTOOLS_SORT_VIRAL' {
        ext.args = "-n"
        ext.prefix = { "${meta.id}.name_sorted.host" }
    }

    withName: 'SPADES_ASSEMBLE' {
        ext.args = "--only-assembler"
        // publishDir = [
        //     path: { "${params.outdir}/dorado/basecaller" },
        //     mode: "${params.publish_dir_mode}",
        //     saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        // ]
    }

    // Make sure we add a new line to each det file to avoid any merging issues
    withName: 'MERGE_REFS' {
        ext.pre_cmd = { "for file in ${input.collect{ file -> "${file}.copy"}.join(' ')}; do echo \"\" >> \"\$file\"; done" }
        ext.post_cmd = "sed '/^\$/d' -"
        ext.suffix = ''
        ext.ext = 'fa'
        // publishDir = [
        //     path: { "${params.outdir}/det" },
        //     mode: "${params.publish_dir_mode}",
        //     saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        // ]
    }

    withName: 'BLAST_MAKEBLASTDB' {
        ext.args = "-dbtype nucl"
        // publishDir = [
        //     path: { "${params.outdir}/blast/blastdb" },
        //     mode: "${params.publish_dir_mode}",
        //     saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        //     enabled: params.save_blast_db
        // ]
    }

    withName: 'BLAST_BLASTN' {
        ext.args = "-outfmt 6 -max_target_seqs 1 -evalue ${params.blast_e_value}"
        // ext.prefix = { "${meta.id}.blast" }
        // publishDir = [
        //     path: { "${params.outdir}/blast/reads" },
        //     mode: "${params.publish_dir_mode}",
        //     saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        // ]
    }
}