process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "${params.publish_dir_mode}",
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

process {
    // Make sure we add a new line to each file to avoid any merging issues
    withName: 'MERGE_REFS' {
        ext.pre_cmd = { "for file in ${input.collect{ file -> "${file}.copy"}.join(' ')}; do echo \"\" >> \"\$file\"; done" }
        ext.post_cmd = "sed '/^\$/d' -"
        ext.ext = 'fasta'
        publishDir = [
            path: { "${params.outdir}/00_reference" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SEQ_SIMULATOR' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'SAMPLESHEET_CHECK' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'SNAPGENE_TO_GFF' {
        publishDir = [
            path: { "${params.outdir}/00_reference" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FORCE_REF_UPPER' {
        ext.post_cmd = "awk '/^>/ {print \$0; next} {print toupper(\$0)}'"
        ext.ext = 'fasta'
        publishDir = [
            path: { "${params.outdir}/00_reference" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CAT_FASTQ' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'FASTQ_TRIM_FASTP_FASTQC:FASTQC_RAW' {
        ext.args   = '--quiet'
        ext.prefix = { "${meta.id}_raw" }
        publishDir = [
            path: { "${params.outdir}/01_qc/fastqc/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTQ_TRIM_FASTP_FASTQC:FASTP' {
        publishDir = [
            [
                path: { "${params.outdir}/01_qc/trimming" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html,log}"
            ]
        ]
    }

    withName: 'FASTQ_TRIM_FASTP_FASTQC:FASTQC_TRIM' {
        ext.args   = '--quiet'
        ext.prefix = { "${meta.id}_trimmed" }
        publishDir = [
            path: { "${params.outdir}/01_qc/fastqc/trimmed" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'TOULLIGQC' {
        ext.args = { "--report-name _ONT" }
        publishDir = [
            path: { "${params.outdir}/01_qc/toulligqc" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'REMOVE_HOST:GUNZIP_FASTA' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_HOST:BWA_INDEX_HOST' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_HOST:BWA_ALIGN_HOST' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_HOST:MINIMAP2_INDEX' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_HOST:MINIMAP2_ALIGN' {
        ext.args = { "${params.minimap2_extra_args ?: ''}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_HOST:BAM_HOST_SORT_STATS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.host.sorted" }
        publishDir = [
            path: { "${params.outdir}/02_contaminant_removal" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'REMOVE_HOST:BAM_HOST_SORT_STATS:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.host.sorted" }
        publishDir = [
            path: { "${params.outdir}/02_contaminant_removal" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

     withName: 'REMOVE_HOST:BAM_HOST_SORT_STATS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.host" }
         publishDir = [
            path: { "${params.outdir}/02_contaminant_removal/host_stats" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.{stats,flagstat,idxstats}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'REMOVE_HOST:SAMTOOLS_VIEW_HOST' {
        ext.args = "-b -f 4"
        ext.prefix = { "${meta.id}.viral" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_HOST:SAMTOOLS_SORT_VIRAL' {
        ext.args = "-n"
        ext.prefix = { "${meta.id}.name_sorted.host" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_HOST:SAMTOOLS_FASTQ_VIRAL' {
        ext.prefix = { "${meta.id}.viral" }
        publishDir = [
            path: { "${params.outdir}/03_viral_reads/01_host_removed" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*{1.fastq.gz,2.fastq.gz,_other.fastq.gz}"
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:SPADES_ASSEMBLE' {
        ext.args = "--only-assembler --careful --cov-cutoff ${params.min_assembly_coverage}"
        publishDir = [
            path: { "${params.outdir}/04_ref_assembly/spades/${meta.id}" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:FLYE' {
        ext.args = "--meta --genome-size 15k"
        publishDir = [
            path: { "${params.outdir}/ref_assembly/flye/${meta.id}" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:CDHIT_CDHIT' {
        ext.args = "-c ${params.cdhit_id_threshold} -n ${params.cdhit_word_size}"
        publishDir = [
            path: { "${params.outdir}/04_ref_assembly/cd_hit" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:SEQTK_FASTA' {
        ext.prefix = { "${meta.id}.filtered" }
        ext.args = "-L ${params.contig_size_threshold}"
        publishDir = [
            path: { "${params.outdir}/04_ref_assembly" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:BLAST_MAKEBLASTDB' {
        ext.args = "-dbtype nucl"
        publishDir = [
            enabled: false
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:BLAST_BLASTN' {
        ext.prefix = { "${meta.id}.blast" }
        ext.args = "-outfmt 6 -max_target_seqs 5 -evalue ${params.blast_e_value}"
        publishDir = [
            path: { "${params.outdir}/04_ref_assembly" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:BUILD_REFERENCE_FASTA' {
        ext.output = { "${meta2.id}.tophits.fasta" }
        publishDir = [
            path: { "${params.outdir}/04_ref_assembly" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'REMOVE_CONTAMINANTS:EXTRACT_REF_IDS' {
        ext.post_cmd = "awk '/^>/{sub(/^>/,\"\"); print \$1}'"
        ext.ext = 'txt'
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_CONTAMINANTS:MINIMAP2_INDEX' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_CONTAMINANTS:MINIMAP2_ALIGN' {
        ext.args = { "${params.minimap2_extra_args ?: ''}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_CONTAMINANTS:SAMTOOLS_INDEX_CONTAM' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_CONTAMINANTS:SAMTOOLS_VIEW_FILT_SEC' {
        ext.args = "-b -F 2048 -F 256"
        ext.prefix = { "${meta.id}.nosec" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_CONTAMINANTS:BAM_CONTAM_SORT_STATS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.contam.sorted" }
        publishDir = [
            path: { "${params.outdir}/02_contaminant_removal" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'REMOVE_CONTAMINANTS:BAM_CONTAM_SORT_STATS:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.contam.sorted" }
        publishDir = [
            path: { "${params.outdir}/02_contaminant_removal" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

     withName: 'REMOVE_CONTAMINANTS:BAM_CONTAM_SORT_STATS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.contam" }
         publishDir = [
            path: { "${params.outdir}/02_contaminant_removal/contaminent_stats" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.{stats,flagstat,idxstats}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'REMOVE_CONTAMINANTS:SAMTOOLS_VIEW_CONTAM' {
        ext.args = ""
        ext.args2 = "\$(cat viral.contigs.txt) '*'"
        ext.prefix = { "${meta.id}.viral" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_CONTAMINANTS:SAMTOOLS_SORT_VIRAL' {
        ext.args = "-n"
        ext.prefix = { "${meta.id}.name_sorted.host" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'REMOVE_CONTAMINANTS:SAMTOOLS_FASTQ_VIRAL' {
        ext.prefix = { "${meta.id}.viral" }
        publishDir = [
            path: { "${params.outdir}/03_viral_reads/02_contaminents_removed" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*{1.fastq.gz,2.fastq.gz,_other.fastq.gz}"
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        publishDir = [
            path: { "${params.outdir}/00_reference" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SPLIT_REF' {
        ext.post_cmd = "awk '/^>/ {if(f) close(f); f = substr(\$0, 2); gsub(/[\\/| ]/, \"_\", f); f = f \".split.fasta\"; print > f; next} {print > f}'"
        ext.ext = 'fasta'
        ext.nofile = true
        publishDir = [
            enabled: false
        ]
    }

    withName: 'GFF_FLU' {
        publishDir = [
            path: { "${params.outdir}/05_ref_annotation/${meta.id}" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MERGE_GFF' {
        ext.post_cmd = "grep -v '^#'"
        ext.ext = 'gff'
        publishDir = [
            path: { "${params.outdir}/05_ref_annotation" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ITERATIVE_ALIGNMENT' {
        ext.max_iterations = params.max_alignment_iterations
        ext.min_cov = params.min_assembly_coverage
        ext.var_thresh = params.consensus_var_p_value
        publishDir = [
            path: { "${params.outdir}/06_alignment" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MINIMAP2_INDEX' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'MINIMAP2_ALIGN' {
        ext.args = { "${params.minimap2_extra_args ?: ''} -R \"@RG\\tID:${meta.id}\\tSM:${meta.id}\\tLB:${meta.id}\\tPL:ONT\"" }
        publishDir = [
            path: { "${params.outdir}/06_alignment" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BWA_INDEX_VIRUS' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'BWA_ALIGN_VIRUS' {
        ext.args = { "${params.bwa_extra_args ?: ''} -R \"@RG\\tID:${meta.id}\\tSM:${meta.id}\\tLB:${meta.id}\\tPL:ILLUMINA\"" }
        publishDir = [
            path: { "${params.outdir}/06_alignment" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PICARD_MARKDUPLICATES' {
        ext.prefix = { "${meta.id}.mrkdup" }
         publishDir = [
            path: { "${params.outdir}/01_qc/duplicates" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.txt",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BAM_VIRAL_SORT_STATS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.viral.sorted" }
        publishDir = [
            path: { "${params.outdir}/06_alignment" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BAM_VIRAL_SORT_STATS:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.viral.sorted" }
        publishDir = [
            path: { "${params.outdir}/06_alignment" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

     withName: 'BAM_VIRAL_SORT_STATS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.viral" }
         publishDir = [
            path: { "${params.outdir}/06_alignment/stats" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.{stats,flagstat,idxstats}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PREPARE_PRIMERS:BLAST_MAKEBLASTDB' {
        ext.args = "-dbtype nucl"
        publishDir = [
            enabled: false
        ]
    }

    withName: 'PREPARE_PRIMERS:BLAST_BLASTN' {
        ext.args = "-task blastn-short -perc_identity 100 -word_size 7 -outfmt \"6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen\""
        ext.prefix = { "${meta2.id}.primer.blast" }
        publishDir = [
            path: { "${params.outdir}/07_primers" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PREPARE_PRIMERS:BLAST_2_BED' {
        ext.post_cmd = "awk 'BEGIN {OFS=\"\\t\"} {start = (\$9 < \$10 ? \$9 - 1 : \$10 - 1); end = (\$9 > \$10 ? \$9 : \$10); strand = (\$9 < \$10 ? \"+\" : \"-\"); print \$2, start, end, \$1, strand}'"
        ext.ext = 'bed'
        publishDir = [
            path: { "${params.outdir}/07_primers" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ARTIC_ALIGN_TRIM' {
        publishDir = [
            path: { "${params.outdir}/07_primers/trimming/${meta.id}" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.txt",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'IVAR_TRIM' {
        ext.prefix = { "${meta.id}.trimmed" }
        publishDir = [
            path: { "${params.outdir}/07_primers" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.log",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'INDEX_TRIMMED' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'INDEX_PRIMER_TRIMMED' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'SORT_PRIMER_TRIMMED' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'NANOPORE_VARCALL:MEDAKA_INFERENCE' {
        // ext.prefix = { "${meta.id}_${read_group ? read_group[0] : 'all'}" }
        ext.prefix = { params.pool_primer_reads ? "${meta.id}_${meta.pool}" : "${meta.id}"}
        ext.args = { "${params.medaka_inference_extra_args ?: ''} ${params.medaka_model ? '--model params.medaka_model' : ''}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'NANOPORE_VARCALL:MEDAKA_VCF' {
        ext.prefix = { params.pool_primer_reads ? "${meta.id}_${meta.pool}" : "${meta.id}"}
        publishDir = [
            path: { "${params.outdir}/08_consensus/medaka/pool_vcfs/raw" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:MEDAKA_ANNOTATE' {
        ext.prefix = { params.pool_primer_reads ? "${meta.id}_${meta.pool}.annotated" : "${meta.id}.annotated"}
        ext.args = "--pad 25"
        publishDir = [
            path: { "${params.outdir}/08_consensus/medaka/pool_vcfs/annotated" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:ARTIC_VCF_MERGE' {
        ext.prefix = { "${meta.id}.medaka" }
        publishDir = [
            path: { "${params.outdir}/08_consensus/medaka" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:BCFTOOLS_PASS_FAIL_SPLIT' {
        ext.prefix = { "${meta.id}.medaka" }
        ext.filter = { "DP<${params.min_consensus_variant_depth}" }
        publishDir = [
            path: { "${params.outdir}/08_consensus/vcf_qc" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:INDEX_CONSEN_VCF' {
        ext.prefix = { "${meta.id}.consensus" }
        publishDir = [
            path: { "${params.outdir}/08_consensus/compressed" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:ARTIC_MAKE_DEPTH_MASK' {
        ext.prefix = { "${meta.id}" }
        ext.args = { "--store-rg-depths --depth ${params.min_depth_mask}" }
        publishDir = [
            path: { "${params.outdir}/08_consensus/depth_mask" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:ARTIC_MASK' {
        publishDir = [
            path: { "${params.outdir}/08_consensus/mask" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:BCFTOOLS_CONSENSUS' {
        ext.prefix = { "${meta.id}" }
        ext.args = { params.consensus_degenerate_bases ? "--iupac-codes" : "" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'NANOPORE_VARCALL:CLAIR3_RUN' {
        ext.prefix = { "${meta.id}.clair3" }
        ext.args = { "${params.clair3_extra_args ?: ''}" }
        publishDir = [
            path: { "${params.outdir}/09_variants/clair3/compressed" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:GUNZIP_CLAIR3_VCF' {
        publishDir = [
            path: { "${params.outdir}/09_variants/clair3" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:LOFREQ_CALL' {
        ext.prefix = { "${meta.id}.lofreq" }
        publishDir = [
            path: { "${params.outdir}/09_variants/lofreq" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:INDEX_LOFREQ_VCF' {
        ext.prefix = { "${meta.id}.lofreq" }
        publishDir = [
            path: { "${params.outdir}/09_variants/lofreq/compressed" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:SNIFFLES' {
        ext.prefix = { "${meta.id}.sniffles" }
        publishDir = [
            path: { "${params.outdir}/09_variants/sniffles/compressed" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:GUNZIP_SNIFFLES_VCF' {
        publishDir = [
            path: { "${params.outdir}/09_variants/sniffles" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: 'NANOPORE_VARCALL:RENAME_FASTA' {
        ext.post_cmd = { "sed '1s/.*/>${meta.id}_nanopore_consensus/'" }
        ext.ext = 'fasta'
        publishDir = [
            path: { "${params.outdir}/08_consensus" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ILLUMINA_VARCALL:LOFREQ_CALL' {
        ext.prefix = { "${meta.id}.lofreq" }
        publishDir = [
            path: { "${params.outdir}/09_variants/lofreq" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ILLUMINA_VARCALL:INDEX_LOFREQ_VCF' {
        ext.prefix = { "${meta.id}.lofreq" }
        publishDir = [
            path: { "${params.outdir}/09_variants/lofreq/compressed" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ILLUMINA_VARCALL:BCFTOOLS_PASS_FAIL_SPLIT' {
        ext.prefix = { "${meta.id}.lofreq" }
        ext.filter = { "DP<${params.min_consensus_variant_depth}" }
        publishDir = [
            path: { "${params.outdir}/08_consensus/vcf_qc" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ILLUMINA_VARCALL:ARTIC_MAKE_DEPTH_MASK' {
        ext.prefix = { "${meta.id}" }
        ext.args = { "--depth ${params.min_depth_mask}" }
        publishDir = [
            path: { "${params.outdir}/08_consensus/depth_mask" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ILLUMINA_VARCALL:ARTIC_MASK' {
        publishDir = [
            path: { "${params.outdir}/08_consensus/mask" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ILLUMINA_VARCALL:BCFTOOLS_CONSENSUS' {
        ext.prefix = { "${meta.id}" }
        ext.args = { params.consensus_degenerate_bases ? "--iupac-codes" : "" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'ILLUMINA_VARCALL:RENAME_FASTA' {
        ext.post_cmd = { params.flu_based_consensus_naming ? "sed 's/^>\\([^|]*\\)|\\([^|]*\\)|\\([^ ]*\\)/>${meta.id}_illumina_consensus_\\2_\\3/'" : "sed 's/^>\\(.*\\)/>${meta.id}_illumina_consensus_\\1/'" }
        ext.ext = 'fasta'
        publishDir = [
            path: { "${params.outdir}/08_consensus" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ILLUMINA_VARCALL:FREEBAYES_CALL' {
        ext.prefix = { "${meta.id}.freebayes" }
        ext.args = "-p 1"
        publishDir = [
            path: { "${params.outdir}/09_variants/freebayes" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ILLUMINA_VARCALL:INDEX_FREEBAYES' {
        ext.prefix = { "${meta.id}.freebayes" }
        publishDir = [
            path: { "${params.outdir}/09_variants/freebayes/compressed" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MERGE_CONSENSUS_REF' {
        ext.pre_cmd = { "for file in ${input.collect{ file -> "${file}.copy"}.join(' ')}; do echo \"\" >> \"\$file\"; done" }
        ext.post_cmd = "sed '/^\$/d' -"
        ext.ext = 'fasta'
        publishDir = [
            enabled: false
        ]
    }

    withName: 'MERGE_CONSENSUS' {
        ext.pre_cmd = { "for file in ${input.collect{ file -> "${file}.copy"}.join(' ')}; do echo \"\" >> \"\$file\"; done" }
        ext.post_cmd = "sed '/^\$/d' -"
        ext.ext = 'fasta'
        publishDir = [
            path: { "${params.outdir}/08_consensus" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUAST' {
        ext.prefix = { "${meta.id}.quast" }
        publishDir = [
            path: { "${params.outdir}/01_qc/quast" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_MPILEUP' {
        publishDir = [
            path: { "${params.outdir}/08_consensus/pileup" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GEN_COUNT_TABLE' {
        ext.prefix = { "${meta.id}.count_table" }
        publishDir = [
            path: { "${params.outdir}/08_consensus/count_tables" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SNPEFF_BUILD' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'SNPEFF_ANN' {
        publishDir = [
            path: { "${params.outdir}/09_variants/snpeff" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MOSDEPTH' {
        ext.args = '--fast-mode --by 200'
        publishDir = [
            path: { "${params.outdir}/01_qc/mosdepth" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MUSCLE' {
        ext.args = { "-clw" }
        publishDir = [
            path: { "${params.outdir}/10_msa" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PANGOLIN' {
        publishDir = [
            path: { "${params.outdir}/11_clade/pangolin" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NEXTCLADE_DATASETGET' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'NEXTCLADE_RUN' {
        publishDir = [
            path: { "${params.outdir}/11_clade/nextclade" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'EXPORT_REPORT_DATA' {
        publishDir = [
            path: { "${params.outdir}/01_qc" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCF_REPORT' {
        publishDir = [
            path: { "${params.outdir}/09_variants" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'EXPORT_REPORT_DATA' {
        publishDir = [
            path: { "${params.outdir}/12_reports/streamlit" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'MULTIQC' {
        ext.args = "--verbose"
        publishDir = [
            path: { "${params.outdir}/12_reports/multiqc" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
