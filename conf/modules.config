process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "${params.publish_dir_mode}",
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

process {
    withName: 'SAMPLESHEET_CHECK' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'SEQ_SIMULATOR' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'GUNZIP_FASTA' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'BWA_INDEX' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'FASTQC_RAW' {
        ext.args   = '--quiet'
        ext.prefix = { "${meta.id}_raw" }
        publishDir = [
            path: { "${params.outdir}/qc/fastqc/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTQC_TRIM' {
        ext.args   = '--quiet'
        ext.prefix = { "${meta.id}_trimmed" }
        publishDir = [
            path: { "${params.outdir}/qc/fastqc/trimmed" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTP' {
        ext.args   = { params.extra_fastp_args ?: '' }
        publishDir = [
            [
                path: { "${params.outdir}/qc/trimming" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html,log}"
            ]
        ]
    }

    withName: 'BWA_ALIGN_HOST' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'BAM_HOST_SORT_STATS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.host.sorted" }
        publishDir = [
            path: { "${params.outdir}/host" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BAM_HOST_SORT_STATS:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.host.sorted" }
        publishDir = [
            path: { "${params.outdir}/host" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

     withName: 'BAM_HOST_SORT_STATS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.host" }
         publishDir = [
            path: { "${params.outdir}/host/stats" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.{stats,flagstat,idxstats}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_VIEW_HOST' {
        ext.args = "-b -f 4"
        ext.prefix = { "${meta.id}.viral" }
        publishDir = [
            path: { "${params.outdir}/viral" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_SORT_VIRAL' {
        ext.args = "-n"
        ext.prefix = { "${meta.id}.name_sorted.host" }
        publishDir = [
            path: { "${params.outdir}/viral" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // withName: 'SPADES_ASSEMBLE' {
    //     ext.args = "--only-assembler"
    //     publishDir = [
    //         path: { "${params.outdir}/viral/assembly" },
    //         mode: "${params.publish_dir_mode}",
    //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //     ]
    // }

    // Make sure we add a new line to each file to avoid any merging issues
    // withName: 'MERGE_REFS' {
    //     ext.pre_cmd = { "for file in ${input.collect{ file -> "${file}.copy"}.join(' ')}; do echo \"\" >> \"\$file\"; done" }
    //     ext.post_cmd = "sed '/^\$/d' -"
    //     ext.suffix = ''
    //     ext.ext = 'fa'
    //     publishDir = [
    //         path: { "${params.outdir}/ref/merged" },
    //         mode: "${params.publish_dir_mode}",
    //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //     ]
    // }

    // withName: 'BLAST_MAKEBLASTDB' {
    //     ext.args = "-dbtype nucl"
    //     publishDir = [
    //         enabled: false
    //     ]
    // }

    // withName: 'BLAST_BLASTN' {
    //     ext.args = "-outfmt 6 -max_target_seqs 1 -evalue ${params.blast_e_value}"
    //     publishDir = [
    //         enabled: false
    //     ]
    // }

    // withName: 'BUILD_REFERENCE_FASTA' {
    //     publishDir = [
    //         path: { "${params.outdir}/ref" },
    //         mode: "${params.publish_dir_mode}",
    //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //     ]
    // }

    // withName: 'ITERATIVE_ALIGNMENT' {
    //     ext.max_iterations = params.max_alignment_iterations
    //     publishDir = [
    //         path: { "${params.outdir}/alignment" },
    //         mode: "${params.publish_dir_mode}",
    //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //     ]
    // }

    withName: 'MULTIQC' {
        publishDir = [
            path: { "${params.outdir}/qc/_multiqc" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
