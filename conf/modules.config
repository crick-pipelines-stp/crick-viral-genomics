process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "${params.publish_dir_mode}",
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

process {
    // Make sure we add a new line to each file to avoid any merging issues
    withName: 'MERGE_REFS' {
        ext.pre_cmd = { "for file in ${input.collect{ file -> "${file}.copy"}.join(' ')}; do echo \"\" >> \"\$file\"; done" }
        ext.post_cmd = "sed '/^\$/d' -"
        ext.ext = 'fasta'
        publishDir = [
            enabled: false
        ]
    }

    withName: 'SEQ_SIMULATOR' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'SAMPLESHEET_CHECK' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'CAT_FASTQ' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'FASTQ_TRIM_FASTP_FASTQC:FASTQC_RAW' {
        ext.args   = '--quiet'
        ext.prefix = { "${meta.id}_raw" }
        publishDir = [
            path: { "${params.outdir}/qc/fastqc/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTQ_TRIM_FASTP_FASTQC:FASTP' {
        publishDir = [
            [
                path: { "${params.outdir}/qc/trimming" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html,log}"
            ]
        ]
    }

    withName: 'FASTQ_TRIM_FASTP_FASTQC:FASTQC_TRIM' {
        ext.args   = '--quiet'
        ext.prefix = { "${meta.id}_trimmed" }
        publishDir = [
            path: { "${params.outdir}/qc/fastqc/trimmed" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'TOULLIGQC' {
        ext.args = { "--report-name _ONT" }
        publishDir = [
            path: { "${params.outdir}/qc/toulligqc" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ILLUMINA_REMOVE_HOST:GUNZIP_FASTA' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'ILLUMINA_REMOVE_HOST:BWA_INDEX_HOST' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'ILLUMINA_REMOVE_HOST:BWA_ALIGN_HOST' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'ILLUMINA_REMOVE_HOST:BAM_HOST_SORT_STATS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.host.sorted" }
        publishDir = [
            path: { "${params.outdir}/host" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ILLUMINA_REMOVE_HOST:BAM_HOST_SORT_STATS:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.host.sorted" }
        publishDir = [
            path: { "${params.outdir}/host" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

     withName: 'ILLUMINA_REMOVE_HOST:BAM_HOST_SORT_STATS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.host" }
         publishDir = [
            path: { "${params.outdir}/host/stats" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.{stats,flagstat,idxstats}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ILLUMINA_REMOVE_HOST:SAMTOOLS_VIEW_HOST' {
        ext.args = "-b -f 4"
        ext.prefix = { "${meta.id}.viral" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'ILLUMINA_REMOVE_HOST:SAMTOOLS_SORT_VIRAL' {
        ext.args = "-n"
        ext.prefix = { "${meta.id}.name_sorted.host" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'ILLUMINA_REMOVE_HOST:SAMTOOLS_FASTQ_VIRAL' {
        ext.prefix = { "${meta.id}.viral" }
        publishDir = [
            path: { "${params.outdir}/viral_fastq" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*{1.fastq.gz,2.fastq.gz}"
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:SPADES_ASSEMBLE' {
        ext.args = "--only-assembler --careful --cov-cutoff ${params.min_assembly_coverage}"
        publishDir = [
            path: { "${params.outdir}/ref_assembly/spades/${meta.id}" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:CDHIT_CDHIT' {
        ext.args = "-c ${params.cdhit_id_threshold} -n ${params.cdhit_word_size}"
        publishDir = [
            path: { "${params.outdir}/ref_assembly/cd_hit" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:SEQTK_FASTA' {
        ext.prefix = { "${meta.id}.filtered" }
        ext.args = "-L ${params.contig_size_threshold}"
        publishDir = [
            path: { "${params.outdir}/ref_assembly" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:BLAST_MAKEBLASTDB' {
        ext.args = "-dbtype nucl"
        publishDir = [
            enabled: false
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:BLAST_BLASTN' {
        ext.prefix = { "${meta.id}.blast" }
        ext.args = "-outfmt 6 -max_target_seqs 5 -evalue ${params.blast_e_value}"
        publishDir = [
            path: { "${params.outdir}/ref_assembly" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ASSEMBLE_REFERENCE:BUILD_REFERENCE_FASTA' {
        ext.output = { "${meta2.id}.tophits.fasta" }
        publishDir = [
            path: { "${params.outdir}/ref_assembly" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        publishDir = [
            path: { "${params.outdir}/ref_assembly" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ITERATIVE_ALIGNMENT' {
        ext.max_iterations = params.max_alignment_iterations
        ext.min_cov = params.min_assembly_coverage
        ext.var_thresh = params.consensus_var_p_value
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MINIMAP2_INDEX' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'MINIMAP2_ALIGN' {
        ext.args = { "${params.minimap2_extra_args ?: ''}" }
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PICARD_MARKDUPLICATES' {
         publishDir = [
            path: { "${params.outdir}/qc/dups" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.txt",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BAM_VIRAL_SORT_STATS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.viral.sorted" }
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BAM_VIRAL_SORT_STATS:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.viral.sorted" }
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

     withName: 'BAM_VIRAL_SORT_STATS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.viral" }
         publishDir = [
            path: { "${params.outdir}/alignment/stats" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.{stats,flagstat,idxstats}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // withName: 'PREPARE_PRIMERS:BLAST_MAKEBLASTDB' {
    //     ext.args = "-dbtype nucl"
    //     publishDir = [
    //         enabled: false
    //     ]
    // }

    // withName: 'PREPARE_PRIMERS:BLAST_BLASTN' {
    //     ext.args = "-task blastn-short -word_size 7 -outfmt \"6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen\""
    //     ext.prefix = { "${meta2.id}.primer.blast" }
    //     publishDir = [
    //         path: { "${params.outdir}/primers" },
    //         mode: "${params.publish_dir_mode}",
    //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //     ]
    // }

    withName: 'ARTIC_ALIGN_TRIM' {
        publishDir = [
            path: { "${params.outdir}/primers/trimming/${meta.id}" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.txt",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'INDEX_TRIMED' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'INDEX_PRIMER_TRIMED' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'NANOPORE_VARCALL:MEDAKA_INFERENCE' {
        // ext.prefix = { "${meta.id}_${read_group ? read_group[0] : 'all'}" }
        ext.prefix = { "${meta.id}_${meta.pool}" }
        ext.args = { "${params.medaka_inference_extra_args ?: ''} ${params.medaka_model ? '--model params.medaka_model' : ''}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'NANOPORE_VARCALL:MEDAKA_VCF' {
        ext.prefix = { "${meta.id}_${meta.pool}" }
        publishDir = [
            path: { "${params.outdir}/consensus/medaka/pool_vcfs/raw" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:MEDAKA_ANNOTATE' {
        ext.prefix = { "${meta.id}_${meta.pool}.annotated" }
        ext.args = "--pad 25"
        publishDir = [
            path: { "${params.outdir}/consensus/medaka/pool_vcfs/annotated" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:ARTIC_VCF_MERGE' {
        ext.prefix = { "${meta.id}.medaka" }
        publishDir = [
            path: { "${params.outdir}/consensus/medaka" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:BCFTOOLS_PASS_FAIL_SPLIT' {
        ext.filter = { "DP<${params.min_consensus_variant_depth}" }
        publishDir = [
            path: { "${params.outdir}/consensus/vcf_qc" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:INDEX_CONSEN_VCF' {
        ext.prefix = { "${meta.id}.consensus" }
        publishDir = [
            path: { "${params.outdir}/consensus/compressed" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:ARTIC_MAKE_DEPTH_MASK' {
        ext.prefix = { "${meta.id}" }
        ext.args = { "--store-rg-depths" }
        publishDir = [
            path: { "${params.outdir}/consensus/depth_mask" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:ARTIC_MASK' {
        publishDir = [
            path: { "${params.outdir}/consensus/mask" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:BCFTOOLS_CONSENSUS' {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'NANOPORE_VARCALL:CLAIR3_RUN' {
        ext.prefix = { "${meta.id}.clair3" }
        ext.args = { "${params.clair3_extra_args ?: ''}" }
        publishDir = [
            path: { "${params.outdir}/variants/clair3/compressed" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:GUNZIP_CLAIR3_VCF' {
        publishDir = [
            path: { "${params.outdir}/variants/clair3" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:LOFREQ_CALL' {
        ext.prefix = { "${meta.id}.lofreq" }
        publishDir = [
            path: { "${params.outdir}/variants/lofreq" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:INDEX_LOFREQ_VCF' {
        ext.prefix = { "${meta.id}.lofreq" }
        publishDir = [
            path: { "${params.outdir}/variants/lofreq/compressed" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:SNIFFLES' {
        ext.prefix = { "${meta.id}.sniffles" }
        publishDir = [
            path: { "${params.outdir}/variants/sniffles/compressed" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPORE_VARCALL:GUNZIP_SNIFFLES_VCF' {
        publishDir = [
            path: { "${params.outdir}/variants/sniffles" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: 'NANOPORE_VARCALL:RENAME_FASTA' {
        ext.post_cmd = { "sed '1s/.*/>${meta.id}.nanopore.consensus/'" }
        ext.ext = 'fasta'
        publishDir = [
            path: { "${params.outdir}/consensus" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MERGE_CONSENSUS_REF' {
        ext.pre_cmd = { "for file in ${input.collect{ file -> "${file}.copy"}.join(' ')}; do echo \"\" >> \"\$file\"; done" }
        ext.post_cmd = "sed '/^\$/d' -"
        ext.ext = 'fasta'
        publishDir = [
            enabled: false
        ]
    }

    withName: 'MERGE_CONSENSUS' {
        ext.pre_cmd = { "for file in ${input.collect{ file -> "${file}.copy"}.join(' ')}; do echo \"\" >> \"\$file\"; done" }
        ext.post_cmd = "sed '/^\$/d' -"
        ext.ext = 'fasta'
        publishDir = [
            path: { "${params.outdir}/consensus" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUAST' {
        ext.prefix = { "${meta.id}.quast" }
        publishDir = [
            path: { "${params.outdir}/qc/quast" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SNPEFF_BUILD' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'SNPEFF_ANN' {
        publishDir = [
            path: { "${params.outdir}/variants/snpeff" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MOSDEPTH' {
        ext.args = '--fast-mode --by 200'
        publishDir = [
            path: { "${params.outdir}/qc/mosdepth" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MUSCLE' {
        ext.args = { "-clw" }
        publishDir = [
            path: { "${params.outdir}/msa" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PANGOLIN' {
        publishDir = [
            path: { "${params.outdir}/clade/pangolin" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NEXTCLADE_DATASETGET' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'NEXTCLADE_RUN' {
        publishDir = [
            path: { "${params.outdir}/clade/nextclade" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCF_REPORT' {
        publishDir = [
            path: { "${params.outdir}/variants" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'MULTIQC' {
        ext.args = "--verbose"
        publishDir = [
            path: { "${params.outdir}/qc/_multiqc" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
