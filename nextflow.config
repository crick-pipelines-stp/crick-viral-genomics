params {
    // Input
    samplesheet = null

    // References
    genome        = null
    viral_fasta   = null
    viral_gff     = null
    host_fasta    = null
    host_bwa      = null
    primers_bed   = null
    primers_fasta = null
    primers_csv   = null

    // Pipeline sections
    run_generate_reads     = false
    run_illumina_qc_trim   = false
    run_nanopore_qc_trim   = false
    run_remove_host_reads  = false
    run_assemble_ref       = false
    run_bwa_align          = false
    run_iterative_align    = false
    run_minimap_align      = false
    run_illumina_mark_dups = false
    run_artic_primer_trim  = false
    run_ivar_primer_trim   = false
    run_nanopore_varcall   = false
    run_illumina_varcall   = false
    run_panglolin          = false
    run_nextclade          = false

    // Data generation options
    seq_sim_ref_dir = "$projectDir/tests/data/seq_sim/H1N1_no_host"
    seq_sim_config = "$projectDir/assets/seq_sim_default_config.yml"
    seq_sim_profile = "illumina_pe_nextera"
    seq_sim_num_reads = 200000

    // Preprocess
    trim_primers_from_reads = false

    // Ref assemble options
    min_assembly_coverage = 20
    cdhit_id_threshold    = 0.90
    cdhit_word_size       = 8
    contig_size_threshold = 507
    blast_e_value         = 0.0001

    // Ref annotation
    annotate_flu_ref = false

    // Alignment options
    max_alignment_iterations = 5
    consensus_var_p_value = 0.001
    minimap2_extra_args = null

    // Primer options
    ivar_trim_extra_args = null

    // Variant calling options
    pool_primer_reads           = false
    medaka_model                = null
    medaka_inference_extra_args = null
    min_consensus_variant_depth = 20
    min_depth_mask              = 20
    consensus_degenerate_bases  = true
    clair3_model                = "r941_prom_sup_g5014"
    clair3_platform             = "ont"
    clair3_extra_args           = null

    // Clade assignment
    nextclade_dataset_name = null
    nextclade_dataset_tag  = null

    // Boilerplate options
    outdir           = "./results"
    tracedir         = "${params.outdir}/pipeline_info"
    publish_dir_mode = "copy"
    monochrome_logs  = false
    ignore_params    = ""
    igenomes_base    = "s3://ngi-igenomes/igenomes"
    igenomes_ignore  = false
    debug            = false

    // Config options
    custom_config_version = "master"
    custom_config_base    = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"

    // Max resource options
    max_memory = "64.GB"
    max_cpus   = 16
    max_time   = "24.h"
}

// Load resourse labels 
includeConfig "conf/base.config"

// Load nf-core custom profiles from different institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
    }
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    arm                         { includeConfig 'conf/arm.config'                         }
    test_illumina_flu_gen       { includeConfig "conf/test_illumina_flu_gen.config"       }
    test_illumina_flu_amp_small { includeConfig "conf/test_illumina_flu_amp_small.config" }
    test_nanopore_cov_amp       { includeConfig "conf/test_nanopore_cov_amp.config"       }

    nanopore    { includeConfig "conf/profiles/nanopore.config"    }
    illumina    { includeConfig "conf/profiles/illumina.config"    }
    covid_artic { includeConfig "conf/profiles/covid_artic.config" }
    flu         { includeConfig "conf/profiles/flu.config"         }
}

docker.registry      = "quay.io"
singularity.registry = "quay.io"

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'pipelines-technology/wic-viral-assembler'
    author          = """Chris Cheshire, Alex Byrne"""
    homePage        = 'https://github.com/crick-pipelines-stp/wic-viral-assembler'
    description     = """Assembly and analysis of viral genomes"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=24.04.2'
    version         = '1.0'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
