"""
Test cases for the preprocess components of the pipeline
"""

nextflow_pipeline {
    name "Test Pipeline Components"
    script "../main.nf"

    tag "preprocess"

    // Test merging of single fastq files
    test("preprocess_cat_fastq_singles") {
        tag "preprocess/cat_fastq_singles"
        when {
            params {
                run_reporting = false

                outdir      = "$outputDir"
                viral_fasta = "$projectDir/data/refs/covid/SARS-CoV-2.fasta"
                samplesheet = "$projectDir/tests/data/samplesheets/test_nanopore_cov_amp.csv"
            }
        }
        then {
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            def task_count = workflow.trace.tasks().count { task ->
                task.name.contains("CAT_FASTQ")
            }
            assertAll(
                { assert workflow.success},
                { assert task_count == 2 },
                { assert snapshot(
                    workflow.trace.succeeded().size(),
                    stable_name,
                    stable_path
                ).match() }
            )
        }
    }

    // Test merging of a folder of fastq files
    test("preprocess_cat_fastq_folder") {
        tag "preprocess/cat_fastq_folder"
        when {
            params {
                run_reporting = false

                outdir      = "$outputDir"
                viral_fasta = "$projectDir/data/refs/covid/SARS-CoV-2.fasta"
                samplesheet = "$projectDir/tests/data/samplesheets/test_nanopore_cov_amp_folder.csv"
            }
        }
        then {
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            def task_count = workflow.trace.tasks().count { task ->
                task.name.contains("CAT_FASTQ")
            }
            assertAll(
                { assert workflow.success},
                { assert task_count == 2 },
                { assert snapshot(
                    workflow.trace.succeeded().size(),
                    stable_name,
                    stable_path
                ).match() }
            )
        }
    }

    // Test illumina read trimming and QC
    test("preprocess_trim_illumina") {
        tag "preprocess/trim_illumina"
        when {
            params {
                run_illumina_qc_trim = true
                run_reporting        = false

                outdir      = "$outputDir"
                viral_fasta = "$projectDir/tests/data/seq_sim/influenza_A/*"
                samplesheet = "$projectDir/tests/data/samplesheets/test_illumina_flu_amp.csv"
            }
        }
        then {
            def stable_name = getAllFilesFromDir(
                params.outdir,
                relative: true,
                includeDir: true,
                ignore: [
                    'pipeline_info/*.{html,json,txt}',
                    '**/*.fastp.log',
                ])
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.trace.succeeded().size(),
                    stable_name,
                    stable_path
                ).match() }
            )
        }
    }

    // Test nanopore read trimming (no timming at the moment, just QC)
    test("preprocess_trim_nanopore") {
        tag "preprocess/trim_nanopore"
        when {
            params {
                run_nanopore_qc_trim = true
                run_reporting        = false

                outdir      = "$outputDir"
                viral_fasta = "$projectDir/data/refs/covid/SARS-CoV-2.fasta"
                samplesheet = "$projectDir/tests/data/samplesheets/test_nanopore_cov_amp.csv"
            }
        }
        then {
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.trace.succeeded().size(),
                    stable_name,
                    stable_path
                ).match() }
            )
        }
    }
}
